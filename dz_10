Задания на БД vk:
/*1. Проанализировать какие запросы могут выполняться наиболее часто в процессе работы приложения и добавить необходимые индексы.*/

-- Добавим индекс из урока
CREATE INDEX media_user_id_media_type_id_idx ON media (user_id, media_type_id);  

-- часто просматривают друзей пользователя, добавляем два индекса
CREATE INDEX friendship_user_id_friend_id_idx ON media (user_id, friend_id);
CREATE INDEX friendship_friend_id_user_id_idx ON media (friend_id, user_id);

-- Лайкуют много, и люди любят просматривать кто-что лайкнул
CREATE INDEX likes_user_id_target_id_like_type_id_idx ON media (user_id, target_id, like_type_id);

-- Сообщений всегда очень много. Вся история переписки с другом заслуживает индекса. 
CREATE INDEX messages_from_user_id_to_user_id_created_at_idx ON media (from_user_id, to_user_id, created_at);
CREATE INDEX messages_to_user_id_from_user_id_created_at_idx ON media (to_user_id, from_user_id, created_at);


-- Возможно имело бы смысл поставить индексы на: город+пользователь, город+пол, на fullname и т.д. но, без статистики такие решения лучше не принимать.


/*2. Задание на оконные функции
-- Построить запрос, который будет выводить следующие столбцы:
-- имя группы
-- среднее количество пользователей в группах
-- самый молодой пользователь в группе
-- самый старший пользователь в группе
-- общее количество пользователей в группе
-- всего пользователей в системе
-- отношение в процентах
-- (общее количество пользователей в группе /  всего пользователей в системе) * 100*/

-- При необходимости добавим записи в таблицу communities_users
/*
INSERT INTO communities_users (community_id, user_id)
  SELECT c.id, u.id
  FROM communities c
  JOIN users u ON rand()
  ORDER BY rand()
  LIMIT 10;
*/

SELECT * FROM communities_users;

-- Вариант 1
SELECT DISTINCT 
  c.name AS group_name,
  COUNT(cu.user_id) OVER() / (SELECT COUNT(*) FROM communities) AS avg_users_in_groups, -- (10 + 5 + 11) / 3
  FIRST_VALUE(CONCAT_WS(" ", p.first_name, p.last_name)) OVER w_community_birthday_desc AS youngest,
  FIRST_VALUE(CONCAT_WS(" ", p.first_name, p.last_name)) OVER w_community_birthday_asc AS oldest,
  COUNT(cu.user_id) OVER w_community AS users_in_group,
  (SELECT COUNT(*) FROM users) AS users_total,
  COUNT(cu.user_id) OVER w_community / (SELECT COUNT(*) FROM users) * 100 AS pct
    FROM communities c
      LEFT JOIN communities_users cu ON cu.community_id = c.id
      LEFT JOIN users u ON u.id = cu.user_id
      LEFT JOIN profiles p ON p.user_id = u.id
      WINDOW w_community AS (PARTITION BY c.id),
             w_community_birthday_desc AS (PARTITION BY c.id ORDER BY p.birthday DESC),
             w_community_birthday_asc AS (PARTITION BY c.id ORDER BY p.birthday)
;

SELECT DISTINCT 
  c.name AS group_name,
  (SELECT count(*) FROM communities_users) / (SELECT COUNT(*) FROM communities) AS avg_users_in_groups, -- (10 + 5 + 11) / 3
  FIRST_VALUE(CONCAT_WS(" ", p.first_name, p.last_name)) OVER w_community_birthday_desc AS youngest,
  FIRST_VALUE(CONCAT_WS(" ", p.first_name, p.last_name)) OVER w_community_birthday_asc AS oldest,
  COUNT(cu.user_id) OVER w_community AS users_in_group,
  (SELECT COUNT(*) FROM users) AS users_total,
  COUNT(cu.user_id) OVER w_community / (SELECT COUNT(*) FROM users) * 100 AS pct
    FROM communities c
      LEFT JOIN communities_users cu ON cu.community_id = c.id
      LEFT JOIN users u ON u.id = cu.user_id
      LEFT JOIN profiles p ON p.user_id = u.id
      WINDOW w_community AS (PARTITION BY c.id),
             w_community_birthday_desc AS (PARTITION BY c.id ORDER BY p.birthday DESC),
             w_community_birthday_asc AS (PARTITION BY c.id ORDER BY p.birthday)
;

-- comm avg     youngest        oldest  
-- sit	6.5000	Trevor Goyette	Donna Doyle	9	101	8.9109
-- Проверка
SELECT p.*
FROM communities_users cu 
JOIN communities c ON c.id = cu.community_id 
JOIN profiles p ON p.user_id = cu.user_id
WHERE c.name = 'sit' 
ORDER BY cu.community_id;